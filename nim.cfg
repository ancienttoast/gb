path = source

@if wasm:
  dynlibOverride = SDL2
  define = glCustomLoader
  define = imguiSrc
@end



@if wasm:
  define = emscripten
@end

@if emscripten or wasm:
  # Needs EMSDK environment variable to point the the emscripten sdk root directory
  clang.path %= "$EMSDK/upstream/emscripten"
  clang.exe = "emcc"
  clang.linkerexe = "emcc"
  clang.cpp.exe = "em++"
  clang.cpp.linkerexe = "em++"

  cc = clang
  os = linux
  cpu = "wasm32"
  gc = arc

  passC %= "-Wno-warn-absolute-paths"   # nim passes libs as absolute paths
  passL %= "--verbose"

  define = noSignalHandler

  @if wasm:
    passC %= "-Iemscripten -s ASSERTIONS=1 -s USE_SDL=2"
    passL %= "-Lemscripten -s ALLOW_MEMORY_GROWTH=1 -s WASM=1 -s 'BINARYEN_METHOD=\"native-wasm\"' -s USE_SDL=2 -s ASSERTIONS=1 --shell-file wasm/gb.html"
  @end
  
  @if release:
    passC %= "-O3 -flto -ffast-math"
    passL %= "-O3 -flto -ffast-math"
  @end
@end



@if psp:
  # Needs PSPSDK environment variable and export PATH=$PATH:$PSPSDK/bin
  cc = gcc
  cpu = mipsel
  os = netbsd

  mipsel.netbsd.gcc.path %= "$PSPSDK/bin"
  mipsel.netbsd.gcc.exe = "psp-gcc"
  mipsel.netbsd.gcc.linkerexe = "psp-gcc"

  mipsel.netbsd.gcc.options.always = "-w"
  mipsel.netbsd.gcc.cpp.options.always = "-w -fpermissive"

  define = useMalloc
  define = nimEmulateOverflowChecks
  define = useSoftwareEndianSwap

  gc = arc
  deadCodeElim = on

  cincludes %= "$PSPSDK/psp/sdk/include"
  clibdir %= "$PSPSDK/psp/sdk/lib"

  out = "hello.elf"

  passL = "-lc -lm"
  passL = "-lpspsdk"
  @if psp_kernel:
    passL = "-lpspkernel"
  @elif psp_user:
    passL = "-lpspuser"
  @else:
    passL = "-lpspuser -lpspkernel"
  @end
@end